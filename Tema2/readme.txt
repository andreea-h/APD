cerinta 4
Analog cu cerinta 3, am folosit un vector de variabile semafor si 2 bariere. Vectorul de semafoare controleaza ca in sensul giratoriu sa poata intra maxim x masini dintr-o directie, deci fiecare element  al vectorului va fi initializat cu valoarea x, preluata din fisier. Logica de prelucrare a vectorului de semafoare este aceesi ca in cadrul taskului anterior. In plus, pentru a respecta restrictia care cere ca intrarea masinilor in intersectie sa se faca atunci cand intra cate una din fiecare directie, am adaugat o bariera prin care sa se asteapte noDirections * x threaduri, unde noDirections este numarul de directii din care pot veni masini si x numarul de masini care intra dintr-o directie.
Cerinta 5
In implementare am folosit ca mecanism de sincronizare un vector de semafoare care controleaza numarul maxim de masini al caror acces este permis de pe fiecare directie. Dimensiunea vectorului de semafoare este egala cu numarul de directii de pe care vin masini, iar fiecare element este initializat cu x. Am pastrat sleep-ul din schetel inainte ca o masina sa intre in sensul giratoriu, inainte de acesta afisand mesajul prin care se arata ca masina a ajuns la sens ("has reached the roundabout..."). Fiecare thread de tipul Car incearca sa faca acquire pe elementul din vectorul de semafoare aferent directiei din care a venit masina, urmand ca dupa afisarea "has exited..." sa faca release, astel incat o alta masina de pe aceeasi directie sa poate intra in sensul giratoriu.