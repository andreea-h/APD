Readme Tema#2 APD - Traffic simulator
Student: Horovei Andreea-Georgiana
Grupa: 335CC

In cadrul implementarii am definit cate o clasa pentru fiecare cerinta, clasele
definite implementand interfata Intersection. In fiecare clasa este implementata 
metoda action(Car car), metoda care ajunge sa se execute la pornirea fiecarui 
thread de tip Car.

Cerinta 1: Simple Semaphore 
(implementare in clasa SimpleIntersection)

	In implementarea cerintei 1, fiecare masina afiseaza mesajul prin care
anunta ca a ajuns la semafor, iar dupa afisarea mesajului fiecare apeleaza 
sleep(time), unde time este timpul de asteptare la semafor al fiecarei masini 
(preluat pentru fiecare masina apeland car.getWaitingTime()). 
	Dupa finalizarea sleep-ului, fiecare masina afiseaza mesajul prin care 
anunta ca a incheiat asteptarea la semafor. La aceasta cerinta nu se folosesc 
mecanisme speciale de sincronizare intrucat din scenariul descris se deduce ca 
deplasarea fiecarei masini este independenta de deplasarea celorlalte masini.


Cerinta 2: Simple_n_roundabout 
(implementare in clasa Simple_N_Intersection)

	Pentru a controla numarul de masini care pot intra in sensul giratoriu, 
am folosit o variabila de tipul Semaphore, initializata cu numarul maxim de masini 
care se pot intra in sensul giratoriu. Valorile pentru N - numarul maxim de masini 
care pot intra in sensul giratoriu, respectiv T- timpul cat dureaza ca fiecare 
masina sa paraseasca sensul sunt membri ai clasei Simple_N_Intersection si 
initializate prin metodele setN si setT. 
	Fiecare masina afiseaza mesajul prin care anunta ca a ajuns la sensul 
giratoriu, apoi incearca sa faca acquire() pe semaforul initializat cu valoarea N, 
urmand sa afiseze mesajul prin care anunta ca a intrat in sensul giratoriu. 
Apoi este efectuata operatia sleep() pentru T/1000 secunde, afisand ulterior 
mesajul prin care masina anunta iesirea din sens. Dupa afisarea mesajului este 
efectuat release() pe semafor pentru a se permite masinilor care sunt in 
asteptare sa poata sa efectueze operatia acquire() pe semafor si sa intre, astfel, 
in sensul giratoriu.

Cerinta 3: Simple_strict_1_car_roundabout
(implemenare in clasa SimpleStrict_1_CarRoundabout)

	Mecanismele de sincronizare pe care le-am folosit la acest task sunt:
-> un vector de variabile de tipul Semaphore cu dimeniunea egala cu numarul de 
directii din care pot veni masinile - pentru a controla ca o singura masina din 
fiecare directie sa poata intra in intersectie la un moment de timp
-> o bariera (initializata cu numarul de directii din care vin masini) pentru a 
astepta masini astfel incat ele sa intre in intersectie doar atunci cand intra 
exact una din fiecare directie.
	Thread-ul de tip Car afiseaza mesajul prin care anunta ca a ajuns la 
intersectie, apoi se astepta la bariera un numar de nrDirections (directiile 
din care pot veni masini) masini. In continuare thread-ul incearca sa faca 
acquire pe variabila semafor din vector, aflata la pozitia egala cu directia 
de pe care a venit masina (operatia acquire va reusi atunci cand in intersectie 
nu se afla nicio masina care a venit pe acea directie). Dupa efectuarea 
operatiei acquire(), se afiseaza mesajul prin care masina anunta ca a ajuns 
in intersectie, apoi se face release pe variabila semafor din vector corespunzatore 
directiei de pe care a venit masina, pentru a permite si altei masini aflata 
in asteptare pe aceeasi directie sa intre in intersectie.

Cerinta 4: Simple_strict_x_car_roundabout
	Analog cu cerinta 3, am folosit un vector de variabile semafor si 2 bariere.
In plus am folosit o varibila de tipul AtomicInteger care contorizeaza numarul de 
masini care ies din intersectie la un moment dat. Daca aceasta ajunge la valoarea 
x * noDirections este resetata la 0 si sunt notificate threadurile care stau in 
asteptare cat timp valoarea acestei variabile este diferita de 0.
	Vectorul de semafoare controleaza ca in sensul giratoriu sa poata intra maxim x 
masini dintr-o directie, deci fiecare element al vectorului va fi initializat cu 
valoarea x, preluata din fisier. Bariera barrier este folosita pentru ca toate masinile
sa ajunga la sensul giratoiu inainte sa se treaca mai departe.
	Logica de prelucrare a vectorului de semafoare este aceeasi ca in cadrul taskului 
anterior. In plus, pentru a respecta restrictia care cere ca intrarea masinilor in 
intersectie sa se faca atunci cand intra cate una din fiecare directie, am adaugat 
o bariera prin care sa se asteapte noDirections * x threaduri, unde noDirections 
este numarul de directii din care pot veni masini si x numarul de masini care intra
dintr-o directie.

Cerinta 5: Simple_max_x_car_roundabout
	In implementare am folosit ca mecanism de sincronizare un vector de semafoare 
care controleaza numarul maxim de masini al caror acces este permis de pe fiecare 
directie. Dimensiunea vectorului de semafoare este egala cu numarul de directii de 
pe care vin masini, iar fiecare element este initializat cu x. Am pastrat sleep-ul 
din schetel inainte ca o masina sa intre in sensul giratoriu, inainte de acesta 
afisand mesajul prin care se arata ca masina a ajuns la sens ("has reached the 
roundabout..."). Fiecare thread de tipul Car incearca sa faca acquire pe elementul 
din vectorul de semafoare aferent directiei din care a venit masina, urmand ca dupa 
afisarea "has exited..." sa faca release, astel incat o alta masina de pe aceeasi 
directie sa poata intra in sensul giratoriu.


Cerinta 6: Priority_intersection
	Mecanismul de sincronizare pe care l-am folosit la aceasta cerinta este o 
variabila de tip Semaphore, pentru care am definit o operatie in plus care 
sa permita reducerea valorii semaforului la orice moment (fara a intra in 
asteptare ca la acquire). Mai exact am definit o clasa interna ModifiedSemaphore 
care extinde clasa Semaphore si contine metoda resize. Metoda resize primeste 
care parametru o valoarea delta si face operatia reducePermits(Math.abs(delta)) 
pe instanta curenta de clasa pentru care este apelata (in cazul nostru o variabila 
de tipul Sempahore). 
	In functie de prioritatea masinii este afisat mesajul prin care o 
masina anunta ca a ajuns la intersectie: pentru prioritate diferita de 1 se intra 
direct in intersectie si pentru prioritate 1, se incearca intrarea in intersectie. 
	Variabila semafor folosita este initializata cu 1. Cand o masina cu 
prioritatea mare intra in intersectie se va efectua operatia resize(1) pe semafor, 
astfel incat o masina cu prioritate mica sa nu mai aiba acces pentru a intra in 
intersectie pana in momentul in care masina cu prioritate mare iese din intersectie 
(la finalizarea sleep-ului) si face release pe semafor. 
	Masinile cu prioritate mica fac acquire pe semafor pentru a incerca sa 
intre in intersectie (operatia reuseste cand in intersectie nu se afla nicio masina 
cu prioritate mare); la iesirea din intersectie se face release pe semafor.

Cerinta 7: Crosswalk 
	Mecanismele de sincronizare pe care le-am folosit la aceasta cerinta sunt 
wait-notifyAll si synchronized, alaturi de 2 obiecte care detin monitor lock-ul la 
un moment dat si pe care se apeleaza wait si notifyAll (green si red).
	In metoda run din clasa Pedestrians, dupa ce pass = true (cu semnificatia 
ca s-au strans toti pietonii), semaforul pentru masini trebuie sa devina rosu-> 
se apeleaza notifyAll pe obiectul care detine monitor-lock-ul cat timp semaforul 
pentru masini este verde. Analog, cand pass devine false, semaforul pentru masini 
trebuie sa devina verde, deci este apelat notifyAll pe obiectul care detine monitor-
lock-ul cat timp semaforul pentru masini este rosu.
	Un thread de tipul Car repeta operatiile cat timp nu s-a finalizat miscarea 
pietonilor (!(Main.pedestrians.isFinished())). Cand s-a finalizat trecerea pietonilor
este afisat mesajul prin care se anunta culoarea verde a semaforului doar daca ultimul
mesaj afisat este cel care anunta culoarea rosie a semaforului.


Cerinta 8: Simple Maintenance
	Pentru implementarea sincronizarii am folosit 2 variabile de tipul Semaphore, 
una prin care se asigura faptul ca pe banda 0 pot circula x masini la un moment dat, 
respectiv un semafor care controleaza circulatia a x masini pe banada 1 de mers 
(a.i. nu va fi depasit numarul de x masini care merg la un mmoment dat pe o anume 
banda). La initializare, semaforul aferent sensului 0 este initializat cu valoarea x, 
iar semaforul aferent sensului 1 este initializat cu valoarea 0 
(primele masini pentru care se permie trecerea sunt cele de pe sensul 0). 
	Am folosit 2 variabile de tipul AtomicInteger (cate una pentru fiecare sens
de mers) pentru a contoriza numarul de masini care au afisat "passed the bottleneck".
Atunci cand numarul de masini care au trecut, mergand pe unul dintre sensuri, 
devine multiplu al lui x, sunt notificate masinile de pe sensul opus, aflate la acel 
moment in asteptare. Dupa ce ies din asteptare, masinile verifica daca pot face acquire() 
pe variabila semafor aferenta sensul corespunzator de mers (a.i. sa nu se depasesca 
numarul de x masini care merg pe un sens la un moment dat). Daca s-a putut face 
acquire(), masina afiseaza mesajul aferent de trecere si incrementeaza variabila care 
contorizeaza numarul de masini de pe sensul aferent care au realizat trecerea. 
Daca numarul de masini care au realizat trecerea pe sensul curent devine multiplu al 
lui x, se face release cu valoarea x pe semaforul aferent sensului opus de mers a.i. 
sa se permita doar circulatia in mod alternativ a cate exact x masini pe o singura banda.


Cerinta 10: Railroad
	Mecanismele de sincronizare pe care le-am folosit la aceasta cerinta sunt:
-o bariera: pentru a realiza sincronizarea masinilor astfel incat trenul trece dupa ce 
toate masinile au ajuns la intersectie
-2 structuri de tipul ArrayBlockingQueue<Integer>, cate una pentru fecare sens de mers,
in care sunt memorate id-urile masinilor in ordinea in care acestea au ajuns la intersectie.
	Dupa ce unul din threadurile Car afiseaza mesajul prin care anunta ca trenul a
trecut, se incearca realizarea operatiei peek pe lista de id-uri asociata sensului de pe care 
vine masini. Daca id-ul threadului nu este primul in lista, acesta intra in busy waiting 
pana cand masinile care au ajuns inaintea lui in intersectie isi finalizeaza executia afisand
mesajul aferent si efectuand operatia poll() pe lista aferenta directie masinii.


Cerinta 9: Complex_Maintenance
	Acesta cerinta nu este rezolvata complet si nu ar trebui sa treaca vreu test. 
	Masinile fac trecerea in ordinea in care au venit si printeaza lanu-ul nou corect, 
dar nu respecta ordinea lane-urilor vechi in sensul listelor de asteptare prezentate in enunt.
Ideea in implementarea la care m-am gandit a fost sa pastrez intr-un 
List<ArrayBlockingQueue<Integer>> id-urile masinilor in ordinea sosirii lor pe fiecare sens,
o masini reusind sa faca trecerea doar daca id-ul sau este egal cu primul din lista 
corespunzatoare directiei de pe care a venit; astfel intra in busy waiting.
	
[Mentiune] Mentionez ca punctajul pe care il obtin pe local este 45/50 la fiecare rulare.


