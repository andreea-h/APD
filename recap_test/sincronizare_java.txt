///clasa Main

import java.lang.InterruptedException;

public class Main {

	public static int NR_THREADS = 4;
	public static int a = 2;
	public static Object lock; //obiectul pe care fac lock
	//toate threadurile trebuie sa fac lock pe acelasi obiect
	
	public static void main(String[] args) {
		//Task[] threads = new Task[NR_THREADS];
		//sau 
		Thread[] threads = new Thread[NR_THREADS];
		
		lock = new Object();
		int i;
		for (i = 0; i < NR_THREADS; i++) {
			threads[i] = new Task(i);
			
			threads[i].start();
		}
		
		for (i = 0; i < NR_THREADS; i++) {
			try {
				threads[i].join();
				//System.out.println("Thread-ul a intors rezultatul " + ((Task)threads[i]).getResult());
				
			}
			catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("Valoare lui a este " + a);
	
	}

}


///clasa Task

///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Aici fac sincronizarea pe un obiect oarecare declarat si instantiat in Main
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
public class Task extends Thread {
	
	private int id;
	private int result;
	
	public Task(int id) {
		this.id = id;
	}
	
	public void run() {
		//result = id * id;
		increment();
		
	}
	
	public int getResult() {
		return result;
	}
	
	public void increment() {
		synchronized(Main.lock) //un singur thread va executa la un moment dat instructiunile din acest bloc
		{ //trebuie sa fac synchronized pe acelasi monitor //pe obj. lock sau pe Task.class
			System.out.println("Valoarea lui a este " + Main.a + " in thread-ul " + id);
			Main.a++;
			System.out.println("a a devenit " + Main.a + " in thread-ul " + id);
		}
	}
}
